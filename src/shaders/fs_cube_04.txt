#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;  

struct FirstSpotlight {
  vec3 position;
  vec3 direction;
  float cutOff;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform FirstSpotlight spotlight_one;

struct SecondSpotlight {
  vec3 position;
  vec3 direction;
  float cutOff;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform SecondSpotlight spotlight_two;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  vec3 spotLightDir1 = normalize(spotlight_one.position - aPos);
  vec3 spotLightDir2 = normalize(spotlight_two.position - aPos);

  float theta1 = dot(spotLightDir1, normalize(-spotlight_one.direction));
  float theta2 = dot(spotLightDir2, normalize(-spotlight_two.direction));

  if(theta1 > spotlight_one.cutOff) {
    vec3 ambient = (spotlight_one.ambient + light.ambient) * vec3(texture(first_texture, aTexCoord));

    vec3 norm = normalize(aNormal);
    vec3 lightDir = normalize(light.position - aPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = (spotlight_one.diffuse + light.diffuse) * diff * vec3(texture(first_texture, aTexCoord));

    vec3 viewDir = normalize(viewPos - aPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = (spotlight_one.specular + light.specular) * spec * vec3(texture(second_texture, aTexCoord));

    vec3 result = ambient + diffuse + specular;
    fragColor = vec4(result, 1.0);
  } else if (theta2 > spotlight_two.cutOff) {
    vec3 ambient = (spotlight_two.ambient + light.ambient) * vec3(texture(first_texture, aTexCoord));

    vec3 norm = normalize(aNormal);
    vec3 lightDir = normalize(light.position - aPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = (spotlight_two.diffuse + light.diffuse) * diff * vec3(texture(first_texture, aTexCoord));

    vec3 viewDir = normalize(viewPos - aPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = (spotlight_two.specular + light.specular) * spec * vec3(texture(second_texture, aTexCoord));

    vec3 result = ambient + diffuse + specular;
    fragColor = vec4(result, 1.0);
  } else {
    vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));

    vec3 norm = normalize(aNormal);
    vec3 lightDir = normalize(light.position - aPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord));

    vec3 viewDir = normalize(viewPos - aPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));

    vec3 result = ambient + diffuse + specular;
    fragColor = vec4(result, 1.0);
  }
}